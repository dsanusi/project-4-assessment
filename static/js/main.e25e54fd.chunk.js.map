{"version":3,"sources":["components/CircleSelector/CircleSelector.jsx","components/Circles/Circles.jsx","App.js","reportWebVitals.js","index.js"],"names":["CircleSelector","props","className","msg","onClick","updateMsg1Method","updateMsg2Method","updateMsg3Method","updateMsg4Method","Circles","App","updateMsg1","setState","msg1","updateMsg2","updateMsg3","updateMsg4","state","val1","this","val","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAYeA,G,MAVQ,SAACC,GAAD,OACrB,sBAAKC,UAAU,iBAAf,UACE,4BAAID,EAAME,MACV,wBAAQC,QAASH,EAAMI,iBAAvB,8BACJ,wBAAQD,QAASH,EAAMK,iBAAvB,6BACI,wBAAQF,QAASH,EAAMM,iBAAvB,8BACA,wBAAQH,QAASH,EAAMO,iBAAvB,mCCGWC,EATC,SAACR,GAAD,OACd,sBAAKC,UAAU,UAAf,UACE,qBAAKE,QAASH,EAAMI,iBAApB,eACA,qBAAKD,QAASH,EAAMK,iBAApB,eACA,qBAAKF,QAASH,EAAMM,iBAApB,eACA,qBAAKH,QAASH,EAAMO,iBAApB,mBCuCWE,E,kDAxCb,aAAe,IAAD,8BACZ,gBAOFC,WAAa,WACX,EAAKC,SAAS,CAACC,KAAM,uBATT,EAYdC,WAAa,WACX,EAAKF,SAAS,CAACC,KAAM,uBAbT,EAgBdE,WAAa,WACX,EAAKH,SAAS,CAACC,KAAM,uBAjBT,EAoBdG,WAAa,WACX,EAAKJ,SAAS,CAACC,KAAM,uBAnBrB,EAAKI,MAAQ,CACXJ,KAAM,GACNK,KAAM,IAJI,E,qDAyBZ,OACE,sBAAKhB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,qCACA,iCACE,cAAC,EAAD,CAAgBC,IAAKgB,KAAKF,MAAMJ,KAAMP,iBAAkBa,KAAKL,WAAYT,iBAAkBc,KAAKR,WAChGJ,iBAAkBY,KAAKJ,WAAYP,iBAAkBW,KAAKH,aAE1D,cAAC,EAAD,CAASI,IAAKD,KAAKF,MAAMC,KAAMZ,iBAAkBa,KAAKL,WAAYT,iBAAkBc,KAAKR,WACzFJ,iBAAkBY,KAAKJ,WAAYP,iBAAkBW,KAAKH,uB,GAnClDK,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e25e54fd.chunk.js","sourcesContent":["import React from \"react\";\n\nconst CircleSelector = (props) => (\n  <div className=\"CircleSelector\">\n    <p>{props.msg}</p>\n    <button onClick={props.updateMsg1Method}> SELECT CIRCLE 1</button>\n<button onClick={props.updateMsg2Method}>SELECT CIRCLE 2</button>\n    <button onClick={props.updateMsg3Method}> SELECT CIRCLE 3</button>\n    <button onClick={props.updateMsg4Method}> SELECT CIRCLE 4</button>\n  </div>\n);\n\nexport default CircleSelector;","import React from \"react\";\n\nconst Circles = (props) => (\n  <div className=\"Circles\">\n    <div onClick={props.updateMsg1Method}>1</div>\n    <div onClick={props.updateMsg2Method}>2</div>\n    <div onClick={props.updateMsg3Method}>3</div>\n    <div onClick={props.updateMsg4Method}>4</div>\n  </div>\n);\n\nexport default Circles;","import React, { Component } from 'react';\nimport './App.css';\nimport CircleSelector from \"./components/CircleSelector/CircleSelector\"\nimport Circles from \"./components/Circles/Circles\"\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      msg1: \"\",\n      val1: \"\"\n    };\n  }\n\n  updateMsg1 = () => {\n    this.setState({msg1: \"CIRCLE 1 SELECTED\"})\n  }\n\n  updateMsg2 = () => {\n    this.setState({msg1: \"CIRCLE 2 SELECTED\"})\n  }\n\n  updateMsg3 = () => {\n    this.setState({msg1: \"CIRCLE 3 SELECTED\"})\n  }\n\n  updateMsg4 = () => {\n    this.setState({msg1: \"CIRCLE 4 SELECTED\"})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n        <main>\n          <CircleSelector msg={this.state.msg1} updateMsg2Method={this.updateMsg2} updateMsg1Method={this.updateMsg1}\n          updateMsg3Method={this.updateMsg3} updateMsg4Method={this.updateMsg4}\n          />\n          <Circles val={this.state.val1} updateMsg2Method={this.updateMsg2} updateMsg1Method={this.updateMsg1}\n          updateMsg3Method={this.updateMsg3} updateMsg4Method={this.updateMsg4}/>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}